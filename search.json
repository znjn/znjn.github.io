[{"title":"htyk_uu项目服务器部署文档","url":"/2022/12/22/htyk_uu%E9%A1%B9%E7%9B%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/","content":"\n一、Linux服务器环境准备服务器地址：10.159.23.205\n1、 安装python3.8wget https://www.python.org/ftp/python/3.8.0/Python-3.8.tgz  # 下载python压缩包tar -zxvf  Python-3.8.0.tgz  # 解压cd Python-3.8.0  # 进入解压后的目录./configure --prefix=/usr/bin/python3  # 指定安装目录make  # 编译make install  # 安装make clean  # 清理编译及安装产生的临时文件\n参考文章：https://www.cnblogs.com/lubians/p/12190866.html\n2、安装虚拟环境\n通过命令安装\npip3 install virtualenvpip3 install virtualenvwrapper\n\n寻找virtualenvwrapper.sh路径\nwhich virtualenvwrapper.sh  # 将找到的路径添加到下一步配置文件中\n\n更改配置文件\n\n\n使用 vi ~&#x2F;.bashrc 命令打开文件，添加如下指令\nexport WORKON_HOME=$HOME/software/nlp/.virtualenvs  # 配置虚拟环境存放路径export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3  # 配置virtualenvwrapper依赖的python路径VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python3/bin/virtualenv  # 配置virtualenv安装后的路径source /usr/local/python3/bin/virtualenvwrapper.sh  # source 上步找到的路径\n\n\n运行配置文件\nsource ~/.bashrc\n\n创建虚拟环境\nmkvirtualenv -p python3 yoyo38  # yoyo38为虚拟环境名称，首次创建完毕自动进入虚拟环境# deactivate  # 需退出虚拟环境时使用# workon yoyo38  # 进入虚拟环境或切换虚拟环境时使用\n\n\n\n二、项目安装步骤\n1、文件准备先将项目包 htyk_uu.tar 上传至服务器路径：&#x2F;tmp&#x2F;（堡垒机服务器中，拖拽即可）\nmkdir ~/nlp/nlp_projs  # 创建nlp工程主目录cd /storage/home/nlp/nlp_projs  # 切换至主目录mv /tmp/htyk_uu.tar ./  # 移动项目包至主目录tar -xvf htyk_uu.tar  # 解包cd htyk_uu  # 切换至项目根目录\n\n2、进入虚拟环境（每次部署、更新或启动前确保进入）workon yoyo38\n\n3、安装依赖库（仅首次部署运行一次）python -m pip install -r requirements.txt  # 安装项目依赖库\n\n4、替换flashtext源码（仅首次部署运行一次）mv keyword.py ~/software/nlp/.virtualenvs/yoyo38/Lib/site-packages/flashtext/keyword.py  # 将项目根目录下的keyword.py文件替换至flashtext库安装目录\n\n5、将py编译成so\n环境准备（仅首次编译运行一次）\n# python安装python -m pip install cython# linux安装apt-get install python-develapt-get install gcc\n\n集成编译\npython py2so.py&#x27;&#x27;&#x27;包含内容：1. 文件夹编译2. 删除编译出的.c文件3. 删除.py源文件4. 重命名编译后的.so文件5. 删除编译产生的temp文件夹&#x27;&#x27;&#x27;\n\n\n\n6、启动服务nohup python app_uu.py --port 8003 &amp;  # 后台启动服务，--port后为端口号\n\n7、 验证及使用\n查看进程\nps aux | grep app_uu\n\n\n查看端口\nnetstat -anp | grep 8003\n\n\nPOST访问使用\nhttp://10.159.23.205:8003/api/autosigns/2/rpt/11111\n\n结束服务（结束单进程）\nkill -9 105119\n\n结束服务（结束多进程）\n\n\n当服务正在使用时，会有多个进程ID，若需停止服务，使用批量结束命令。\nkill -9 `lsof -t -i:8003`  # 8003为端口号\n\n\n异常情况\n\n当服务正在使用时，若使用结束单进程命令，会导致其他子进程挂起，使用结束多进程命令可清理掉所有挂起进程。\n三、更新版本\n1. 文件准备# 先将新版本项目文件夹 htyk_uu_(版本号) 上传至服务器路径：/tmp/（堡垒机服务器中，拖拽即可）# 进入服务器nlp工程主目录cd /storage/home/nlp/nlp_projs # 移动项目包至主目录mv /tmp/htyk_uu_(版本号)/ ./# 切换至项目根目录cd htyk_uu_(版本号)\n\n2. 源码隐藏编译（在新项目根路径 htyk_uu_(版本号) 中运行）python py2so.py\n\n3. 切换版本\n查看旧版本进程ID，并结束进程。若只有单进程，使用结束单进程命令；若为多进程，使用批量结束进程命令。\nps aux | grep app_uu  # 获取到进程IDkill -9 进程ID  # 结束单进程kill -9 `lsof -t -i:8003`  # 结束多进程，8003为端口号\n\n启动新版本\nnohup python app_uu.py --port 8003 &amp;  # 后台启动服务，--port后为端口号\n\n验证及使用（参考 二、项目安装步骤 第7步）\n\n\n4. 历史版本管理将历史版本文件夹打包封存，存至指定位置（依据后续详细规范）。\n"},{"title":"Hello World","url":"/2023/04/04/hello-world/","content":"This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"测试文档","url":"/2023/02/08/%E5%BE%85%E5%8A%9E/","content":"文档简介。\n\n\n\n快速开始\n代码练习，题目描述，提取步骤\n汇总函数及参数，便于查询 机器学习算法\n汇总公式\nmouseinc 区域截图\n\n易混淆\nx_train,x_test,y_train,y_test为训练集特征值、测试集特征值、训练集目标值、测试集目标值\n\n临时问题\n嵌入式操作系统\n\n递归删除\n\n面向对象实现多任务\n\n面向对象 类 初始化\n\nreturn的用法\nresult = fn(name, pwd)return result\n\n字典创建的Series 下标索引？\n\nDateFrame.head（）不加括号的区别？\n\n初始化变量 input_size output_size\n\n\nTips\nTab 或Tab Tab进行提示\n\n绝对路径（创建链接）、相对路径（工程使用），分情况使用\n\nmain函数，不加的话可能导致程序重复执行\n\n函数（）：可以输出\n\n类 不用写__init__方法，默认继承object\n\nwhile True: 无限循环\n\n编码技巧：不用的变量使用“_”代替\n\n数据库表中，primary key   必须包含唯一的值，且not null\n\n激活函数：添加非线性因素\n\n#更新模型中所有的参数for p in rnn.parameters():\n​\t#将参数的张量表示与参数的梯度乘以学习率的结果相加以此来更新参数，即梯度下降​\tp.data. add_(-learning_rate, p.grad.data)\n\n.item() 取真实值，精度更高\n\n损失函数优化，最好加法优化，轻易不要乘法\n\n回译数据法：源数据语法标准、正确时使用，口语化的语句效果不好\n\n\n重点\n数据结构：树结构（重要）\n\n快速排序（面试热点）\n二叉树由遍历结果反推二叉树的结构\n\n1.为什么要随机抽样训练集？　　\n\n如果不进行随机抽样，每棵树的训练集都一样，那么最终训练出的树分类结果也是完全一样的\n\n2.为什么要有放回地抽样？\n\n如果不是有放回的抽样，那么每棵树的训练样本都是不同的，都是没有交集的，这样每棵树都是“有偏的”，都是绝对“片面的”(当然这样说可能不对)，也就是说每棵树训练出来都是有很大的差异的；而随机森林最后分类取决于多棵树(弱分类器)的投票表决。\n\n\nboosting 和 bagging 区别？\n\n\n其他\ntree：没有的话需要安装 sudo apt install tree\n\n函数汇总导入包机器学习\n导入数据\nfrom sklearn.datasets import load_boston\n\n数据集划分模块\nfrom sklearn.model_selection import train_test_split\n\n特征工程-标准化模块\nfrom sklearn.preprocessing import StandardScaler\n\n机器学习-线性回归（岭回归）\nfrom sklearn.linear_model import Ridge\n\n模型评估-均方误差\nfrom sklearn.metrics import mean_squared_error\n\n\n公式\nsigmoid函数\n\n\n\n逻辑回归数学模型\n\n逻辑回归损失函数\n\n\n均方误差\n\n梯度（单变量的梯度为该点斜率，多变量为该点的偏导数）偏导数：梯度下降公式\n\nα:  学习率(步长). 不能太大也不能太小. 一般设置为：0.01 ~ 0.001\n梯度是上升最快的方向, 我们需要是下降最快的方向, 所以需要加负号\n\n\n损失函数(在线性回归中，损失函数通常为样本输出和假设函数的差取平方)假设函数\n\n其中表示第个样本特征，表示第个样本对应的输出\n\n同样是线性回归，对应于上面的假设函数，损失函数为（均方误差）：对于的偏导数计算如下：由于样本中没有，上式中令所有的为1\n更新所有的，对于的更新表达式如下：或参数更新公式写为:\n\n\n信息熵变量的信息熵：$$H(x)=-\\sum_{i=0}^{n} P\\left(x_{i}\\right) \\log {2} P\\left(x{i}\\right)$$\n表示信息的信息熵值，表示某一个信息出现的概率\n条件熵\n\n信息增益\n\n信息增益：目标值信息熵 - 条件熵\n文本摘要踩坑：​\t1. gensim版本不同，参数名称不同报错\n# gensim中的Word2Vec算法默认采用CBOW模式训练.    wv_model = Word2Vec(LineSentence(merged_seg_path), size=params['embed_size'],                        negative=5, workers=8, iter=params['wv_train_epochs'],                        window=3, min_count=5)    TypeError: __init__() got an unexpected keyword argument 'size'# 解决方法: 根据官方手册，将size改为vector_size    TypeError: __init__() got an unexpected keyword argument 'iter'# 把key为iter改为epochs以后报错解除print('训练集X填充PAD, START, STOP, UNK处理中...')    train_df['X'] = train_df['X'].apply(lambda x: pad_proc(x, x_max_len, wv_model.wv.index_to_key))# index2word and index2entity attribute is now index_to_key:\n\nhttps://github.com/RaRe-Technologies/gensim/wiki/Migrating-from-Gensim-3.x-to-4#4-vocab-dict-became-key_to_index-for-looking-up-a-keys-integer-index-or-get_vecattr-and-set_vecattr-for-other-per-key-attributes\n\npytorch cpu与gpu load时相互转化\n\n# 原码model.load_state_dict(torch.load(MODEL_PATH))# 报错RuntimeError: Attempting to deserialize object on a CUDA device but torch.cuda.is_available() is False. If you are running on a CPU-only machine, please use torch.load with map_location=torch.device('cpu') to map your storages to the CPU.    # 更改后    model.load_state_dict(torch.load(MODEL_PATH,map_location='cpu'))\n\nhttps://blog.csdn.net/bc521bc/article/details/85623515\n\nneo4j 无法远程连接问题\n找到neo4j安装目录下的conf文件夹下的neo4j.conf文件，将其内的以下几行注释放开即可\ndbms.connectors.default_listen_address=0.0.0.0dbms.connector.bolt.enabled=truedbms.connector.bolt.listen_address=:7687dbms.connector.http.enabled=truedbms.connector.http.listen_address=:7474dbms.connector.https.enabled=truedbms.connector.https.listen_address=:7473\n\nLinux# 查看GPU动态状态watch -n 1 nvidia-smi# 查看端口占用netstat -anp | grep 8001# 查看进程ps aux | grep stand\n\n文件\n# 打包tar -cvf file_name.tar directory# 解包tar -xvf file_name.tar -C new_dir\n\n\n\nwin10 Linux子系统开机启动service xrdp startservice ssh start\n\n重启Linux子系统以管理员权限运行cmd\nwsl --shutdown#停止LxssManager服务net stop LxssManager  #启动LxssManager服务net start LxssManager  \n\n默认以 root用户登陆用everything 搜索“ubuntu.exe”打开“ubuntu.exe”所在路径，复制路径。用管理员模式打开cmd输入 cd 然后粘贴复制的路径，按下回车键然后输入：ubuntu.exe config --default-user root\n\nInstall GUI Desktopin WSL2 Ubuntu 20.04 LTS in Windows 10\nhttps://harshityadav95.medium.com/install-gui-desktop-in-wsl2-ubuntu-20-04-lts-in-windows-10-ae0d8d9e4459\n远程桌面启动xrdp服务\nsudo service xrdp start\n\n远程桌面闪退\n\n需要在该用户目录创建一个.xsession\n\n（1）需要在该用户目录创建一个.xsession：touch .xsession（2）里面写“xfce4-session”一句话就行：echo xfce4-session &gt;~/.xsession（3）然后进入到用户目录下sudo chown username:username .xsession\n\nSSH\n默认使用端口22连接，而22已经被windows占用。打开配置文件\n\nsudo vi /etc/ssh/sshd_config\n\n\n修改端口为2222\n\n启动SSH\n\n\nsudo service ssh start# 发现启动失败提示sshd error: could not load host key，# 安装sudo dpkg-reconfigure openssh-server# 如下报错sshd: no hostkeys available -- exiting.# 解决ssh-keygen -Aservice ssh start\n\n\n启动成功，再在pycharm中连接测试下，发现已经可以连接了；\n\n但是又发现一个新问题：Permission denied (publickey)；\n\n继续修改之前的文件 找到PasswordAuthentication 改为yes，PermitRootLogin改为yes；\n\n然后重启SSH\n\n\nsudo service ssh --full-restart\n\n\n\n设置root账号密码sudo passwd//输入要设置的root账号密码//再次输入要设置的root账号密码su root//输入刚才设置好的密码。\n\n设置默认用户# 打开Windows PowerShellubuntu2004 config --default-user root# 没有报错就代表成功# 重新打开已经是root用户了\n\nLinux子系统挂载磁盘https://blog.csdn.net/weixin_30332705/article/details/95112129\n安装软件一、 tgz格式安装包\n获取\n\nwget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1d.tar.gz\n\n\n解压\n\ntar zxvf 文件名.tgz -C ./  # 解压到当前路径\n\n\n切换到解压后的路径，进行安装配置\n\ncd 路径名# 安装到/usr/local/python目录，不用事先创建python目录./configure --prefix=/usr/local/python3.8.12# 注意是否有gcc环境apt install gcc\n\n\n编译，安装\n\n# 编译中，需要等一会make# 在测试pyspak代码时，报错/usr/local/bin/python: can't decompress data;zlib not availablea. 编辑 /python安装目录/Modules/Setup ，将 #zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz 的注释去掉b. 重新安装python：configure &amp;&amp; make &amp;&amp; make install# /zlibmodule.c:10:10: fatal error: zlib.h: No such file or directory命令行输入sudo apt-get install zlib1g-dev，并再次make# 安装make install\n\n\n清除配置编译的一些文件\n\nmake clean\n\n\n设置为默认\n\nln -s /usr/local/python3.8.13/bin/python3 /usr/bin/pythonln -s /usr/local/python3.8.13/bin/pip3 /usr/bin/pip\n\n\n\n二、deb安装包sudo dpkg -i google-chrome-stable_current_amd64.deb \n\n安装报错\n提示Depends: libpython3.5 (&gt;= 3.5.0~b1) but it is not going to be installed的解决方法\n\n# 卸载vim-commonsudo apt-get remove vim-common# 还是会提示依赖libpython，接着 修改受损软件包sudo apt-get -f install# 然后sudo apt-get update\n\n三、rpm安装包Ubuntu无法安装rpm包\nubuntu RPM should not be used directly install RPM packages, use Alien instead!\n# Ubuntu的软件包格式是deb，如果要安装rpm的包，则要先用alien把rpm转换成deb。sudo apt-get install alien #安装aliensudo alien xxxx.rpm #将rpm转换为deb，会生成一个同名的xxxx.debsudo dpkg -i xxxx.deb #安装\n\nwget https://www.google.cn/chrome/google-chrome.list -P /etc/apt/sources.list.d/\n更换源sudo sed -i 's/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.listsudo sed -i 's/mirrors.tuna.tsinghua.edu.cn/archive.ubuntu.com/g' /etc/apt/sources.listmirrors.tuna.tsinghua.edu.cnmirrors.aliyun.commirrors.163.commirrors.ustc.edu.cnpypi.douban.comapt-get update# 临时使用-i https://pypi.tuna.tsinghua.edu.cn/simple\n\nlinux设置开机服务自动启动/关闭自动启动命令[root@localhost ~]# chkconfig --list     显示开机可以自动启动的服务[root@localhost ~]# chkconfig --add *** 添加开机自动启动***服务[root@localhost ~]# chkconfig --del ***   删除开机自动启动***服务\n\n\n\n开发环境Virtualenv虚拟环境一、前置操作（非必须）\n# 查询python所在路径which python3/usr/bin/python3# 更新pippip install --upgrade pip\n\n二、安装虚拟环境\nsudo pip install virtualenvsudo pip install virtualenvwrapper  # 有时wrapper安装报错，可能与Python版本有关，选择低一些的版本。\n\n上述工具装好后，需要执行以下环境变量设置。\n\n创建目录用来存放虚拟环境\n\nmkdir $HOME/envs\n\n\n进入.bashrc文件\n\nvim ~/.bashrc\n\n在~/.bashrc中添加行：\nexport WORKON_HOME=$HOME/envsexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python3.8.12/bin/virtualenvsource /usr/local/python3.8.12/bin/virtualenvwrapper.sh\n\n\n运行.bashrc文件\n\nsource ~/.bashrc\n\n如果报错\n-bash: /usr/local/bin/virtualenvwrapper.sh: No such file or directory\n\n说明文件没在这个路径下\n可以通过which 命令查看（which是用来查看当前要执行的命令所在的路径）\n$ which virtualenvwrapper.sh/usr/local/bin/virtualenvwrapper.sh\n\n\n修改 ~/.bashrc内容并加载\n\n三、创建python虚拟环境\nmkvirtualenv -p /usr/bin/python3.7 env37\n\n常见的virtualenvwrapper命令\nworkon env37cdvirtualenvrmvirtualenv my_envlsvirtualenvdeactivate\n\npip安装包\n批量安装\n\npip install -r requirements.txt\n\n\npip在虚拟环境安装python包却安装在全局/真实环境\n\n# 只在本环境中的python解释器下安装python3 -m pip install# 直接把包安装在pip所属的python解释器中pip install\n\nNvidia-smi实时并高亮显示watch -n 1 -d nvidia-smi\n\n\n\n软件FinalShellhttp://www.hostbuf.com/\n账户\n老8卡：10.131.102.103/zhuning/root123\n\nPython去除字符串最后的换行符‘\\n’s = s.replace('\\n','').replace('\\r','')\n\n找出两个列表中相同和不同的元素(使用推导式)list1 = ['张三', '李四', '王五', '老二']list2 = ['张三', '李四', '老二', '王七']a = [x for x in list1 if x in list2] #两个列表表都存在b = [y for y in (list1 + list2) if y not in a] #两个列表中的不同元素c = [x for x in list1 if x not in list2]  #在list1列表中而不在list2列表中d = [y for y in list2 if y not in list1]  #在list2列表中而不在list1列表中\n\n三种倒序遍历方法：1. for x in reversed(list)2. for x in range(len(list)-1,-1,-1)3. for x in list[::-1]\n\npython字典的遍历方式一、常规遍历\n\n遍历字典的项（与列表遍历一致）\n\ndic = {‘a’:2,‘b’:3}for item in dic.items():\n\n\n遍历字典的键\n\nfor i in dic: # for i in dic.keys():（不加keys()默认就是遍历键）\n\n\n遍历字典的值\n\nfor i in dic.values():\n\n\n遍历字典的键值对\n\nfor key ,value in dic.items():\n\npython读写csv或tsv文件的几种方法两种文件的唯一区别在于分隔符，csv 是逗号，tsv 是制表符。\n说明：将以下代码中的delimiter，sep参数去掉，即可用于处理 csv 文件，逗号是默认分隔符。\n写文件\n使用 csv 库。\nimport csvwith open('file.tsv', 'w') as f:\ttsv_w = csv.writer(f, delimiter='\\t')\ttsv_w.writerow(['id', 'name', 'score'])\ttsv_w.writerows([[1, 'Frank', 99], [2, 'John', 70]])  # 多行写入\n\n读文件\n\n使用 csv 库\n\nimport csvwith open('file.tsv') as f: \ttsvreader = csv.reader(f, delimiter='\\t')\tfor line in tsvreader:\tprint(line)\n\n\n使用 DataFrame\n\nfrom pandas import DataFramedf = DataFrame.from_csv('file.tsv', sep='\\t')print(df)\n\n\n使用 pandas 库的 csv 读取函数\n\nimport pandas as pdprint(pd.read_csv('file.tsv', delimiter='\\t'))\n\npython List中元素两两组合aa = ['a', 'b', 'c']bb = list(itertools.permutations(aa, 2))  # 排列（不包含自己）cc = list(itertools.combinations(aa, 2))  # 组合dd = [(x, y) for x in aa for y in aa]  # 排列（包含自己）\n\n合并嵌套列表a=[[1],[2],[3],[4],[5]]merge=sum(a,[])  # 将list列表与一个空列表相加，就能把嵌套列表合并成一个\n\n\n\n正则表达式import stringpunc = string.punctuationprint([punc])  # ['!\"#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~']\n\n\n\n匹配中文标点：[\\u3002\\uff1b\\uff0c\\uff1a\\u201c\\u201d\\uff08\\uff09\\u3001\\uff1f\\u300a\\u300b]匹配中文字符： [\\u4e00-\\u9fa5]匹配双字节字符(包括汉字在内)：[^/x00-/xff]PS：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）匹配空白行的正则表达式：/n/s*/rPS：可以用来删除空白行匹配HTML标记的正则表达式：&lt;(/S*?)[^&gt;]*&gt;.*?&lt;//1&gt;|&lt;.*? /&gt;PS：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力匹配首尾空白字符的正则表达式：^/s*|/s*$PS：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式匹配Email地址的正则表达式：/w+([-+.]/w+)*@/w+([-.]/w+)*/./w+([-.]/w+)*PS：表单验证时很实用匹配网址URL的正则表达式：[a-zA-z]+://[^/s]*PS：网上流传的版本功能很有限，上面这个基本可以满足需求匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$PS：表单验证时很实用匹配国内电话号码：/d{3}-/d{8}|/d{4}-/d{7}PS：匹配形式如 0511-4405222 或 021-87888822匹配腾讯QQ号：[1-9][0-9]{4,}PS：腾讯QQ号从10000开始匹配中国邮政编码：[1-9]/d{5}(?!/d)PS：中国邮政编码为6位数字匹配身份证：/d{15}|/d{18}PS：中国的身份证为15位或18位匹配ip地址：/d+/./d+/./d+/./d+PS：提取ip地址时有用匹配特定数字：^[1-9]/d*$　 　 //匹配正整数^-[1-9]/d*$ 　 //匹配负整数^-?[1-9]/d*$　　 //匹配整数^[1-9]/d*|0$　 //匹配非负整数（正整数 + 0）^-[1-9]/d*|0$　　 //匹配非正整数（负整数 + 0）^[1-9]/d*/./d*|0/./d*[1-9]/d*$　　 //匹配正浮点数^-([1-9]/d*/./d*|0/./d*[1-9]/d*)$　 //匹配负浮点数^-?([1-9]/d*/./d*|0/./d*[1-9]/d*|0?/.0+|0)$　 //匹配浮点数^[1-9]/d*/./d*|0/./d*[1-9]/d*|0?/.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）^(-([1-9]/d*/./d*|0/./d*[1-9]/d*))|0?/.0+|0$　　//匹配非正浮点数（负浮点数 + 0）PS：处理大量数据时有用，具体应用时注意修正匹配特定字符串：^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串^/w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串PS：最基本也是最常用的一些表达式\n\nre.search re.findall re.finditer返回匹配内容、下标或索引1、re.search\n返回第一个匹配到的文本和对应索引\nimport repattern = re.compile('(\\d*).(duck|chicken)')s='there are 3 duck and 10 chicken'f=re.search(pattern,s)print(f)  # &lt;re. Match object: span=(10, 16), match=' 3 duck'&gt;print(f.group())  # 3 duckprint(f.span())  # (10, 16)\n\n2、re.findall\n返回所有满足条件的文本，返回的是列表形式。但不能返回索引\nimport repattern = re.compile('(\\d*).(duck|chicken)')s='there are 3 duck and 10 chicken'f=re.findall(pattern,s)print(f)  # [('3', ' duck'), ('10', ' chicken')]\n\n3、re.finditer\n可以返回所有满足条件的文本和对应索引\nimport repattern = re.compile('(\\d*).(duck|chicken)')s='there are 3 duck and 10 chicken'f=re.finditer(pattern,s)print(f)  # &lt;callable_iterator object at 0x0000021D34B7C6A0&gt;for i in f:     print(i) # &lt;re.Match object: span=(10, 16), match='3 duck'&gt;             # &lt;re.Match object: span=(21, 31), match='10 chicken'&gt;    print(i.group())  # 3 duck /n 10 chicken    print(i.span())  # (10, 16) /n (21,31)\n\n\n\n错误Transformer或者SentenceTransformer时有时会遇到如下警告，甚是恼火！！！WARNING:transformers.tokenization_utils_base:Truncation was not explicitely activated but max_length is provided a specific value, please use truncation=True to explicitely truncate examples to max length. Defaulting to ‘longest_first’ truncation strategy. If you encode pairs of sequences (GLUE-style) with the tokenizer you can select this strategy more precisely by providing a specific strategy to truncation.\n\n解决方法：\nimport logginglogging.basicConfig(level=logging.ERROR)\n\nSyntaxError: positional argument follows keyword argument出现这个bug的原因在于参数位置不正确，关键字参数必须跟随在位置参数后面! 因为python函数在解析参数时, 是按照顺序来的, 位置参数是必须先满足, 才能考虑其他可变参数.\n# 错误output(model, pred_batches, pred_data, aaaa, output_file=ent_pred_file, args)# 正确output(model, pred_batches, pred_data, aaaa, args, output_file=ent_pred_file)\n\n\n\n工程部署flask、flask_restful返回中文乱码\napp = Flask(__name__)app.config['JSON_AS_ASCII'] = Falseapp.config.update(RESTFUL_JSON=dict(ensure_ascii=False))api = Api(app)\n\n"}]